# This is a basic workflow to help you get started with Actions

name: Hi GitGeminiHub!

# Controls when the workflow will run
on:
  # Triggers the workflow
  issues:
    types: [opened, reopened, edited]

  pull_request:

  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare_job:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' ||
            (github.event_name == 'issues' && github.event.issue.state == 'open' && contains(github.event.issue.labels.*.name, 'task'))
        }}
    runs-on: ubuntu-latest
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    steps:
      - name: Say Hello World
        run: |
            echo "Hi, GitGeminiHub"
            echo "Here is [github] context:"
            echo "$GITHUB_CONTEXT"


  extract_info_job:
    needs: [prepare_job]

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      TASK: ${{ steps.retrieve_issue_body_step.outputs.TASK }}

      PROMPT: ${{ steps.extract_prompt_info_step.outputs.PROMPT }}
      CONTENT: ${{ steps.extract_content_info_step.outputs.CONTENT }}

      MODEL_NAME: ${{ steps.extract_setting_info_step.outputs.MODEL_NAME }}
      TEMPERATURE: ${{ steps.extract_setting_info_step.outputs.TEMPERATURE }}
      TOP_P: ${{ steps.extract_setting_info_step.outputs.TOP_P }}
      TOP_K: ${{ steps.extract_setting_info_step.outputs.TOP_K }}
      MAX_OUTPUT_TOKENS: ${{ steps.extract_setting_info_step.outputs.MAX_OUTPUT_TOKENS }}
      HARASSMENT: ${{ steps.extract_setting_info_step.outputs.HARASSMENT }}
      HATE_SPEECH: ${{ steps.extract_setting_info_step.outputs.HATE_SPEECH }}
      SEXUALLY_EXPLICIT: ${{ steps.extract_setting_info_step.outputs.SEXUALLY_EXPLICIT }}
      DANGEROUS_CONTENT: ${{ steps.extract_setting_info_step.outputs.DANGEROUS_CONTENT }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check out (pull request/push test only)
        uses: actions/checkout@v3

      # - name: Mock issue body (pull request/push test only)
      #   id: mock_issue_body_step
      #   if: ${{ github.event_name != 'issues' }}
      #   run: |
      #     echo "MOCK_ISSUE_BODY<<EOF" >> "$GITHUB_OUTPUT"
      #     echo "$(cat tests/ask_task_body.txt)" >> "$GITHUB_OUTPUT"
      #     echo "EOF" >> "$GITHUB_OUTPUT"
      #     # echo "Mock the issue body from tests/ask_request_body.txt: `${{ steps.mock_issue_body_step.outputs.MOCK_ISSUE_BODY }}`"
      #         echo "Mock the issue body from tests/ask_request_body.txt: `${{ steps.mock_issue_body_step.outputs.MOCK_ISSUE_BODY }}`"
      #     # https://github.com/orgs/community/discussions/26288
      #     # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings

      - name: Retrieve issue body
        id: retrieve_issue_body_step
        uses: actions/github-script@v7.0.1
        with:
          script: |

            let body;
            if (${{ github.event_name == 'issues' }}) {
                console.log("Retrieven issue body from UERS");
                body = `${{ github.event.issue.body }}`;

                console.log(`${{ github.event.issue.labels }}`)
            } else {
                console.log("Retrieven issue body from MOCK");
                // https://github.com/juliangruber/read-file-action/blob/master/index.js
                let { promises: fs } = require('fs');
                body = await fs.readFile('tests/general_task_body.md', 'utf8');
                core.setOutput("TASK", 'general');
            }
            console.log(`the issue body\n ${body}`);
            core.setOutput("ISSUE_BODY", body);

      - name: Extract setting info
        id: extract_setting_info_step
        # if: ${{ github.event_name != 'issues' || contains(github.event.issue.labels.*.name, 'task') }}
        uses: actions/github-script@v7.0.1
        with:
          script: |

            let issue_body_txt = `${{ steps.retrieve_issue_body_step.outputs.ISSUE_BODY }}`;

            // console.log(issue_body_txt);
            let extract_error = "Please check your setting.";

            let lines = issue_body_txt.split('\n');

            let head_mark = "### Setting";
            let head_start_mark = "###";
            let head_mark_start = -1;
            let head_mark_end = lines.length;
            for (let i = 0; i < lines.length; i++) {
                if (lines[i].trim() == head_mark) {
                    head_mark_start = i;
                    break;
                }
            }

            if (head_mark_start < 0) {
                throw new Error(extract_error + ":1");
            }

            for (let i = head_mark_start + 1; i < lines.length; i++) {
                if (lines[i].trim().startsWith(head_start_mark)) {
                    head_mark_end = i;
                    break;
                }
            }

            if (head_mark_end < 0) {
                throw new Error(extract_error + ":2");
            }

            let section_mark_start = -1;
            let section_mark_end = -1;
            let section_mark = "---";
            for (let i = head_mark_start + 1; i < head_mark_end; i++) {
                if (lines[i].trim().startsWith(section_mark)) {
                    section_mark_start = i;
                    break;
                }
            }

            if (section_mark_start < 0) {
                throw new Error(extract_error + ":3");
            }

            for (let i = head_mark_end - 1; i > section_mark_start; i--) {
                if (lines[i].trim().startsWith(section_mark)) {
                    section_mark_end = i;
                    break;
                }
            }

            if (section_mark_end <= section_mark_start) {
                throw new Error(extract_error + ":4");
            }

            let code_mark_start = section_mark_start;
            let code_mark_end = section_mark_end;
            /*
            let code_mark_start = -1;
            let code_mark_end = -1;
            let code_mark_head = "```json setting";
            let code_mark_tail = "```";
            for (let i = section_mark_start + 1; i < section_mark_end; i++) {
                if (lines[i].trim() == code_mark_head) {
                    code_mark_start = i;
                    break;
                }
            }

            if (code_mark_start < 0) {
                throw new Error(extract_error);
            }

            for (let i = section_mark_end - 1; i > code_mark_start; i--) {
                if (lines[i].trim() == code_mark_tail) {
                    code_mark_end = i;
                    break;
                }
            }
            */

            if (code_mark_end <= code_mark_start) {
                throw new Error(extract_error + ":5");
            }

            let text_body = "";
            for (let i = code_mark_start + 1; i < code_mark_end; i++) {
                text_body += lines[i].trim() + "\n";
            }

            let setting = JSON.parse(text_body);

            core.setOutput("MODEL_NAME", setting.model_name);
            core.setOutput("TEMPERATURE", setting.generation_configuration.temperature);
            core.setOutput("TOP_P", setting.generation_configuration.top_p);
            core.setOutput("TOP_K", setting.generation_configuration.top_k);
            core.setOutput("MAX_OUTPUT_TOKENS", setting.generation_configuration.max_output_tokens);
            core.setOutput("HARASSMENT", setting.safety_setting.harassment);
            core.setOutput("HATE_SPEECH", setting.safety_setting.hate_speech);
            core.setOutput("SEXUALLY_EXPLICIT", setting.safety_setting.sexually_explicit);
            core.setOutput("DANGEROUS_CONTENT", setting.safety_setting.dangerous_content);


            console.log(`The setting:\n + ${ text_body }`)

      - name: Extract prompt info
        id: extract_prompt_info_step
        uses: actions/github-script@v7.0.1
        with:
          script: |

            let issue_body_txt = `${{ steps.retrieve_issue_body_step.outputs.ISSUE_BODY }}`;

            // console.log(issue_body_txt);
            let extract_error = "Please fill the prompt.";

            let lines = issue_body_txt.split('\n');

            let head_mark = "### Prompt";
            let head_start_mark = "###";
            let head_mark_start = -1;
            let head_mark_end = lines.length;
            for (let i = 0; i < lines.length; i++) {
                if (lines[i].trim() == head_mark) {
                    head_mark_start = i;
                    break;
                }
            }

            if (head_mark_start < 0) {
                throw new Error(extract_error + ":1");
            }

            for (let i = head_mark_start + 1; i < lines.length; i++) {
                if (lines[i].trim().startsWith(head_start_mark)) {
                    head_mark_end = i;
                    break;
                }
            }

            if (head_mark_end < 0) {
                throw new Error(extract_error + ":2");
            }

            let section_mark_start = -1;
            let section_mark_end = -1;
            let section_mark = "---";
            for (let i = head_mark_start + 1; i < head_mark_end; i++) {
                if (lines[i].trim().startsWith(section_mark)) {
                    section_mark_start = i;
                    break;
                }
            }

            if (section_mark_start < 0) {
                throw new Error(extract_error + ":3");
            }

            for (let i = head_mark_end - 1; i > section_mark_start; i--) {
                if (lines[i].trim().startsWith(section_mark)) {
                    section_mark_end = i;
                    break;
                }
            }

            if (section_mark_end <= section_mark_start) {
                throw new Error(extract_error + ":4");
            }

            let code_mark_start = section_mark_start;
            let code_mark_end = section_mark_end;
            /*
            let code_mark_start = -1;
            let code_mark_end = -1;
            let code_mark_head = "```json setting";
            let code_mark_tail = "```";
            for (let i = section_mark_start + 1; i < section_mark_end; i++) {
                if (lines[i].trim() == code_mark_head) {
                    code_mark_start = i;
                    break;
                }
            }

            if (code_mark_start < 0) {
                throw new Error(extract_error);
            }

            for (let i = section_mark_end - 1; i > code_mark_start; i--) {
                if (lines[i].trim() == code_mark_tail) {
                    code_mark_end = i;
                    break;
                }
            }
             */

            if (code_mark_end <= code_mark_start) {
                throw new Error(extract_error + ":5");
            }

            let text_body = "";
            for (let i = code_mark_start + 1; i < code_mark_end; i++) {
                text_body += lines[i].trim() + "\n";
            }

            core.setOutput("PROMPT", text_body);

            console.log("The prompt: " + text_body);

      - name: Extract content info
        id: extract_content_info_step
        if: ${{ steps.retrieve_issue_body_step.outputs.TASK == 'general' || contains(github.event.issue.labels.*.name, 'text') || contains(github.event.issue.labels.*.name, 'image') }}
        uses: actions/github-script@v7.0.1
        with:
          script: |

            let issue_body_txt = `${{ steps.retrieve_issue_body_step.outputs.ISSUE_BODY }}`;

            // console.log(issue_body_txt);
            let extract_error = "Please fill the content.";

            let lines = issue_body_txt.split('\n');

            let head_mark = "### Content";
            let head_start_mark = "###";
            let head_mark_start = -1;
            let head_mark_end = lines.length;
            for (let i = 0; i < lines.length; i++) {
                if (lines[i].trim() == head_mark) {
                    head_mark_start = i;
                    break;
                }
            }

            if (head_mark_start < 0) {
                throw new Error(extract_error + ":1");
            }

            for (let i = head_mark_start + 1; i < lines.length; i++) {
                if (lines[i].trim().startsWith(head_start_mark)) {
                    head_mark_end = i;
                    break;
                }
            }

            if (head_mark_end < 0) {
                throw new Error(extract_error + ":2");
            }

            let section_mark_start = -1;
            let section_mark_end = -1;
            let section_mark = "---";
            for (let i = head_mark_start + 1; i < head_mark_end; i++) {
                if (lines[i].trim().startsWith(section_mark)) {
                    section_mark_start = i;
                    break;
                }
            }

            if (section_mark_start < 0) {
                throw new Error(extract_error + ":3");
            }

            for (let i = head_mark_end - 1; i > section_mark_start; i--) {
                if (lines[i].trim().startsWith(section_mark)) {
                    section_mark_end = i;
                    break;
                }
            }

            if (section_mark_end <= section_mark_start) {
                throw new Error(extract_error + ":4");
            }

            let code_mark_start = section_mark_start;
            let code_mark_end = section_mark_end;
            /*
            let code_mark_start = -1;
            let code_mark_end = -1;
            let code_mark_head = "```json setting";
            let code_mark_tail = "```";
            for (let i = section_mark_start + 1; i < section_mark_end; i++) {
                if (lines[i].trim() == code_mark_head) {
                    code_mark_start = i;
                    break;
                }
            }

            if (code_mark_start < 0) {
                throw new Error(extract_error);
            }

            for (let i = section_mark_end - 1; i > code_mark_start; i--) {
                if (lines[i].trim() == code_mark_tail) {
                    code_mark_end = i;
                    break;
                }
            }
            */

            if (code_mark_end <= code_mark_start) {
                throw new Error(extract_error + ":5");
            }

            let text_body = "";
            for (let i = code_mark_start + 1; i < code_mark_end; i++) {
                text_body += lines[i].trim() + "\n";
            }

            core.setOutput("CONTENT", text_body);

            console.log("The content: " + text_body);


  execute_ask_job:
    needs: [extract_info_job]
    if: ${{ github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'task') }}

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      RESPONSE_FILE: "cabin/response.txt"

      TASK: ${{ needs.extract_info_job.outputs.TASK }}
      PROMPT: ${{ needs.extract_info_job.outputs.PROMPT }}
      CONTENT: ${{ needs.extract_info_job.outputs.CONTENT }}

      MODEL_NAME: ${{ needs.extract_info_job.outputs.MODEL_NAME }}

      TEMPERATURE: ${{ needs.extract_info_job.outputs.TEMPERATURE }}
      TOP_P: ${{ needs.extract_info_job.outputs.TOP_P }}
      TOP_K: ${{ needs.extract_info_job.outputs.TOP_K }}
      MAX_OUTPUT_TOKENS: ${{ needs.extract_info_job.outputs.MAX_OUTPUT_TOKENS }}
      HARASSMENT: ${{ needs.extract_info_job.outputs.HARASSMENT }}
      HATE_SPEECH: ${{ needs.extract_info_job.outputs.HATE_SPEECH }}
      SEXUALLY_EXPLICIT: ${{ needs.extract_info_job.outputs.SEXUALLY_EXPLICIT }}
      DANGEROUS_CONTENT: ${{ needs.extract_info_job.outputs.DANGEROUS_CONTENT }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Check out
        uses: actions/checkout@v3


      - name: Setup workspace
        run: |
          echo "Setup current workspace under: $(pwd)"
          pip install google-generativeai==0.3.1
          pip install wget
          pip install Pillow


      # - name: Execute request
      #   id: execute_request_step
      #   run: |
      #       echo "RESPONSE<<EOF" >> "$GITHUB_OUTPUT"
      #       echo "$(python3 ask.py $MODEL_NAME ${{ secrets.GOOGLE_GEMINI_API_KEY }} "$PROMPT" -c "$CONTENT" -t $TEMPERATURE -p $TOP_P -k $TOP_K -m $MAX_OUTPUT_TOKENS -hs $HARASSMENT -ht $HATE_SPEECH -sx $SEXUALLY_EXPLICIT -dg $DANGEROUS_CONTENT") >> "$GITHUB_OUTPUT"
      #       echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Execute request
        id: execute_request_step
        run: |
          python3 "$TASK.py" $MODEL_NAME ${{ secrets.GOOGLE_GEMINI_API_KEY }} "$PROMPT" -c "$CONTENT" -o $RESPONSE_FILE -t $TEMPERATURE -p $TOP_P -k $TOP_K -m $MAX_OUTPUT_TOKENS -hs $HARASSMENT -ht $HATE_SPEECH -sx $SEXUALLY_EXPLICIT -dg $DANGEROUS_CONTENT


      - name: Upload artifact
        if: ${{ env.TASK == 'translate' }}
        uses: actions/upload-artifact@v4
        id: upload_artifact_step
        with:
          name: artifact-issue-${{ github.event.issue.number }}
          path: cabin/Translated - *.*
          if-no-files-found: error
          retention-days: 7


      - name: Post response to comment if succeed
        if: ${{ success() }}
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const issueNumber = context.issue.number;

            const {TASK, PROMPT, CONTENT, RESPONSE_FILE} = process.env

            let { promises: fs } = require('fs');

            let response_text
            if (`${ TASK }` == 'translate') {
              response_text = `The artifact download URL: ` + `[**artifact-issue-${{ github.event.issue.number }}**](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.upload_artifact_step.outputs.artifact-id }})` + "\n"
            } else {
              response_text = await fs.readFile(`${ RESPONSE_FILE }`, 'utf8');
            }

            let prompt_raw = `${ PROMPT }`;
            let prompt_quota = "";

            let lines = prompt_raw.trim().split('\n');
            for (let i = 0; i < lines.length; i++) {
              prompt_quota += "    " + lines[i].trim() + "\n";
            }

            let content_raw = `${ CONTENT }`;
            let content_quota = "";

            lines = content_raw.trim().split('\n');
            for (let i = 0; i < lines.length; i++) {
              content_quota += "    " + lines[i].trim() + "\n";
            }

            let completedComment
              = "    Prompt:\n"
              + `${ prompt_quota }\n`;

            if (content_quota.trim().length != 0) {
              completedComment = completedComment
                + "    Content:\n"
                + `${ content_quota }\n`
            }

            completedComment = completedComment
              + "\n"
              + "#### 🎉 Task executed successfully. Here is the response:\n"
              + `${ response_text }\n\n`
              + "#### 😉 Task completed, and close ticket.\n";

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: completedComment
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: ['task completed']
            });

            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                name: 'task failed'
              });
            } catch (err) {
                console.log(err);
            }

            console.log(`${ completedComment }`)


      - name: Post sorry to comment if failed
        if: ${{ failure() }}
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const issueNumber = context.issue.number;

            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                name: 'task completed'
              });
            } catch (err) {
                console.log(err);
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: ['task failed']
            });

            const {PROMPT, CONTENT} = process.env

            let prompt_raw = `${ PROMPT }`;
            let prompt_quota = "";

            let lines = prompt_raw.trim().split('\n');
            for (let i = 0; i < lines.length; i++) {
              prompt_quota += "    " + lines[i].trim() + "\n";
            }

            let content_raw = `${ CONTENT }`;
            let content_quota = "";

            lines = content_raw.trim().split('\n');
            for (let i = 0; i < lines.length; i++) {
              content_quota += "    " + lines[i].trim() + "\n";
            }

            let completedComment
              = "    Prompt:\n"
              + `    ${ prompt_quota }\n`;

            if (content_quota.trim().length != 0) {
              completedComment = completedComment
                + "    Content:\n"
                + `    ${ content_quota }\n`
            }

            completedComment = completedComment
              + "\n"
              + "#### 🎉 Task executed successfully. Here is the response:\n"
              + `${ response_text }\n\n`
              + "#### 😢 Sorry for the failure. Please check the task info, and ***EDIT***, ***Reopen***, ***New*** for retry.\n";

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: completedComment
            });

            // keep it opened if failed, let user modify and re-submit
            // await github.rest.issues.update({
            //   owner: context.repo.owner,
            //   repo: context.repo.repo,
            //   issue_number: issueNumber,
            //   state: "closed"
            // });


      - name: Close Issue
        if: ${{ success() }}
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const issueNumber = context.issue.number;

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              state: "closed"
            });
